// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Specification of cache invalidation protocol buffers that are used by the
// client code clients of the system.

syntax = "proto2";

option optimize_for = LITE_RUNTIME;

package invalidation;

// A basic message type used for versioning public proto messages and/or
// types. The two fields are supposed to be used as follows:
//
// * The major version number is changed whenever an incompatible protocol
//   change or type has been made.  When a message/object with a particular
//   major version is received, the receiver needs to either know how to handle
//   this version or it needs to drop the message
//
// * The minor version can be changed (say) to document some internal change
//   for debugging purposes. When a message is received by a receiver, it MUST
//   ignore the minor version number for making any protocol/type
//   decisions. I.e., the minor version number is for debugging purposes only.
//
//   Versioning is used in various places - for entities that are part of a
//   protocol (e.g., message requests), for various client implementations, and
//   for other data types that change independently of the protocol (e.g.,
//   session tokens).  For each versioned entity, we define a specific message
//   type to encapsulate the version of that entity (e.g., ProtocolVersion,
//   ClientVersion, etc.).
message Version {
  optional uint32 major_version = 1;
  optional uint32 minor_version = 2;
}

// Protocol version history:
// 1.0: first versioned version
// 1.1: adds TYPE_SHUTDOWN to ClientToServerMessage.MessageType
message ProtocolVersion {
  optional Version version = 1;
}

//
// A message containing either a string or a sequence of bytes.  Only one of the
// fields should be set.  Setting both may lead to undefined behavior.
message StringOrBytesP {
  optional string string_value = 1;
  optional bytes bytes_value = 2;
}

// Identifies an object that a client can register for.
message ObjectIdP {

  //
  // NOTE: This enum MUST be kept in sync with ObjectSource.Type in
  // types.proto.
  //

  // The property that hosts the object.
  enum Source {
    INTERNAL = 1;
    TEST = 2; // Uncontrolled object space for use by anyone for testing.

    // Numbers below 1000 are reserved for internal use.
    CHROME_SYNC = 1004;
  }

  // The id of the object relative to the source.
  optional StringOrBytesP name = 1;

  // The source of the data.
  optional Source source = 2;
}

// A message containing the part of the client's id that the application
// controls.
message ClientExternalIdP {
  // The type of client.
  optional ClientType client_type = 1;
  // A client id assigned by the application.
  optional StringOrBytesP app_client_id = 2;
}

// Defines a specific version of the client library.
message ClientVersion {
  // The variety of implementation.
  enum Flavor {
    // Open-source C++ implementation at:
    // http://code.google.com/p/google-cache-invalidation-api
    OPEN_SOURCE_CPP = 4;
  }
  optional Flavor flavor = 1;

  // Flavor-specific version number.
  optional Version version = 2;
}

// Possible statuses of operations.
message Status {
  enum Code {
    // Next enum value: 14

    SUCCESS = 1;

    UNKNOWN_CLIENT = 5; // The id provided by the client is unknown.
    INVALID_SESSION = 6; // The session provided by the client is invalid.
    TRANSIENT_FAILURE = 12;
    PERMANENT_FAILURE = 13;

    // No status codes below this line should ever be sent to the Ticl.

    // An operation with a higher sequence number has already been issued
    // on the same object. The Ticl may use this code internally, but it
    // never receives it over the network.
    STALE_OPERATION = 9;

    // The following fields are not used any more.
    //
    // The provided GAIA id did not match the one in the client id or session.
    // AUTHENTICATION_FAILURE = 3; Not used any more
    // Request missing required fields or bad field values
    // INVALID_CLIENT_TYPE = 4; // The client type is unknown or missing.
    // MALFORMED_REQUEST = 2;
    // OBJECT_UNKNOWN = 7; // The object does not exist at the server.
    // OBJECT_DELETED = 8; // The object was deleted.
    // SERVICE_UNAVAILABLE = 10; // Temporary failure.
    // UNSUPPORTED_VERSION = 11; // Unsupported protocol or data version.
    // UNKNOWN_ERROR = 255;
  }
  optional Code code = 1;

  // Textual description of the status or additional context about any error.
  optional string description = 2;
}

// Invalidation for a given object/version.
message InvalidationP {
  optional ObjectIdP object_id = 1;

  // For deleted objects, the version number is 2^63 - 1.
  optional uint64 version = 2;

  // Records a history of how long it took the invalidation to pass through
  // various components. FOR INTERNAL USE ONLY.
  optional ComponentStampLog component_stamp_log = 3;

  // Optional payload associated with this invalidation.
  optional StringOrBytesP payload = 4;

  // Fields below are FOR INTERNAL USE ONLY and should not be accessed by
  // external code.
  optional bool incremental_payload = 5;
}

// Record of a transit time at a particular component.
// FOR INTERNAL USE ONLY.
message ComponentStamp {
  optional string component = 1;
  optional uint64 time = 2; // miliseconds since UNIX epoch
}

// List of transit times.
// FOR INTERNAL USE ONLY.
message ComponentStampLog {
  repeated ComponentStamp stamp = 1;
}

// Specifies the intention to change a registration on a specific object.  To
// update registrations, a client sends a message containing repeated
// RegistrationUpdate messages.
message RegistrationUpdate {
  enum Type {
    REGISTER = 1;
    UNREGISTER = 2;
  }
  required Type type = 1;  // Whether to register or unregister.
  required ObjectIdP object_id = 2;  // The object for which to (un)register.

  // The (optional) highest version number the client knows for this object.
  optional uint64 version = 3;

  // A client-supplied operation sequence number.  Each operation issued by the
  // client should have a sequence number strictly greater than any other
  // sequence number ever used by that client.
  //
  // These sequence numbers serve two purposes. On the one hand, they ensure
  // that we process client requests in issue-order, despite possible network
  // message reordering.  E.g., they prevent operations issued in the order
  // "register(x), unregister(x), register(x)" from being processed as
  // "register(x), register(x), unregister(x)," which would lead to the client
  // not being registered for object "x."
  //
  // Note that this sequence number response is *NOT* a cumulative
  // acknowledgement for all client-issued operations with lower sequence
  // numbers. Some operations with lower sequence numbers may not have been
  // processed, but in this case, the client will not have received a response
  // for those operations. The client must detect that it has not received a
  // response and retry those operations.
  //
  // One strategy for generating monotonically-increasing sequence numbers is
  // for clients to persist a k-bit "crash count", which they increment each
  // time they start up, and also in the event that they exhaust (n-k) bits of
  // sequence numbers.  The overall sequence number uses the crash count for its
  // high-order bits, plus the partial sequence number for the low-order bits.
  //
  // If clients find the requirement of issuing strictly-increasing sequence
  // numbers onerous, one possibility would be to use the value of the client's
  // clock instead.  However, if the client's clock ever flows backwards, it can
  // leave the client vulnerable to the silent loss of registrations (e.g., due
  // to message reordering).  Clients must judge for themselves whether the risk
  // is acceptable: technically, the system's guarantees only apply to
  // operations that were assigned proper, increasing sequence numbers (the
  // chronologically later operations with lower sequence numbers may or may not
  // take effect).
  optional int64 sequence_number = 4;

  // Log times at which the registration passed through various components of
  // the system.
  optional ComponentStampLog component_stamp_log = 5;
}

// Indicates the result of trying to change a client's registration for an
// object.  When a client makes a request to update registrations, the response
// contains one of these message for each object requested by the client.
message RegistrationUpdateResult {

  // The attempted registration operation.
  optional RegistrationUpdate operation = 1;

  // The status of the operation attempt.
  optional Status status = 2;
}


message ClientToServerMessage {

  // Next field index: 14.

  // Configuration for the message /////////////////////////////////////////////

  // Protocol version of this message.
  optional ProtocolVersion protocol_version = 12;

  // The implementation version of this client.  This field is advisory, and may
  // or may not be set on any given message.
  optional ClientVersion client_version = 13;

  // Timestamp from the client's clock.
  optional uint64 timestamp = 14;

  // Type of message being sent.

  enum MessageType {
    TYPE_ASSIGN_CLIENT_ID = 1;
    TYPE_UPDATE_SESSION = 2;
    TYPE_OBJECT_CONTROL = 3;

    // This message indicates the client is terminating, so the server is
    // advised to garbage-collect the client's persistent state as soon as it is
    // convenient to do so.
    TYPE_SHUTDOWN = 4;

    // The message indicates that a client is restarting with a previously
    // persisted session, and it needs the server to inform it about its
    // registrations.
    TYPE_REGISTRATION_SYNC = 5;
  }

  // Message type MUST be set.
  optional MessageType message_type = 10;

  // Message id to identify the message.
  optional string message_id = 11;

  // Possible client actions that have no additional data associated with them.
  // These are mutually exclusive, so it's reasonable to have a single optional
  // enum.
  enum Action {
    ASSIGN_CLIENT_ID = 1; // assign a client id (and get a session)
    UPDATE_SESSION = 2; // get a session (client id already assigned)
    POLL_INVALIDATIONS = 3; // poll invalidations (session already exists)
    HEARTBEAT = 4; // execute a push-path heartbeat.
  }

  // Client may request at most one special action.
  optional Action action = 5;

  // Assign client id. /////////////////////////////////////////////////////////

  // These fields must be set if action is ASSIGN_CLIENT_ID.
  // Otherwise, they are ignored.
  optional ClientType client_type = 1;
  optional StringOrBytesP app_client_id = 2;

  // A nonce for request-reply matching for ASSIGN_CLIENT_ID.  Since some
  // delivery service implementations may reorder or misdeliver responses, it's
  // important that clients have a way of knowing that messages are actually
  // relevant to them.  The normal mechanism for checking messages involves the
  // client's comparing its session token with the one in the message.  However,
  // when a client id is assigned, the client (by definition) has no session
  // token, so we use a nonce instead.
  optional uint64 nonce = 9;

  // Whether this client has persistence (should be set for ASSIGN_CLIENT_ID).
  optional bool is_persistent = 8;

  // Update session ////////////////////////////////////////////////////////////

  // This field must be set if action is UPDATE_SESSION.  Otherwise, it is
  // ignored.
  optional bytes client_uniquifier = 3;

  // Normal operation. /////////////////////////////////////////////////////////

  // If action is omitted or POLL_INVALIDATIONS, then a session token must be
  // provided.
  optional bytes session_token = 4;

  // Requested registrtations / unregistrations.
  repeated RegistrationUpdate register_operation = 6;

  // Acknowledged invalidations.
  repeated InvalidationP acked_invalidation = 7;
}

message ServerToClientMessage {

  // Next field index: 17.

  // Protocol version of this message.
  optional ProtocolVersion protocol_version = 14;

  // Timestamp from server's clock, for debugging.
  optional uint64 timestamp = 15;

  // Type of message being sent.
  enum MessageType {
    TYPE_ASSIGN_CLIENT_ID = 1;
    TYPE_UPDATE_SESSION = 2;
    TYPE_INVALIDATE_CLIENT_ID = 3;
    TYPE_INVALIDATE_SESSION = 4;
    TYPE_OBJECT_CONTROL = 5;
  }

  // Mesasge type MUST Be set.
  optional MessageType message_type = 12;

  // Message id to identify the message.
  optional string message_id = 13;

  // A token identifying a session.
  optional bytes session_token = 2;

  // An overall status for the collection of requests.
  optional Status status = 8;

  // Assign client id. /////////////////////////////////////////////////////////

  // If the client requested an ASSIGN_CLIENT_ID action, and this was
  // successful, then client_uniquifier contains the assigned uniquifier.  If
  // the status code is UNKNOWN_CLIENT, then this contains the unknown client
  // uniquifier that the client tried to use.  In all other cases, the server
  // may omit this field.
  optional bytes client_uniquifier = 1;

  // If a client id is being assigned, then these fields must contain the client
  // type, app client id, and nonce the client provided with the
  // ASSIGN_CLIENT_ID request.  Providing these values allows the client to
  // verify that the response is really intended for it.  Such verification is
  // necessary because a delivery service may send a given response to several
  // clients belonging to the same user.
  optional ClientType client_type = 9;
  optional StringOrBytesP app_client_id = 10;
  optional uint64 nonce = 11;

  // For a new session, the last sequence number the new server knows about.
  // Any operations the client performed with higher sequence numbers should be
  // considered lost, so the client should resend them.
  optional uint64 last_operation_sequence_number = 7;

  // Normal operation. /////////////////////////////////////////////////////////

  // Results of registration updates.
  repeated RegistrationUpdateResult registration_result = 3;

  // Invalidations.
  repeated InvalidationP invalidation = 4;

  // Information about the server registration state.
  optional uint32 num_total_registrations  = 16;

  // Client control. ///////////////////////////////////////////////////////////

  // The earliest the client may send its next heartbeat.  Defaults to 20
  // minutes.
  optional uint32 next_heartbeat_interval_ms = 5 [default = 1200000];

  // The earliest the client may poll for invalidations again.  Defaults to one
  // hour.
  optional uint32 next_poll_interval_ms = 6 [default = 3600000];
}
